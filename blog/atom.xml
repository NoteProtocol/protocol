<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://noteprotocol.org/blog</id>
    <title>Note Protocol Blog</title>
    <updated>2024-08-21T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://noteprotocol.org/blog"/>
    <subtitle>Note Protocol Blog</subtitle>
    <icon>https://noteprotocol.org/img/favicon.png</icon>
    <entry>
        <title type="html"><![CDATA[Path to Vision Realization for NOTE Protocol]]></title>
        <id>https://noteprotocol.org/blog/2024/08/21/note-protocol-path-to-vision-realization</id>
        <link href="https://noteprotocol.org/blog/2024/08/21/note-protocol-path-to-vision-realization"/>
        <updated>2024-08-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Note: This article is still being written. Stay tuned for updates.]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p><strong>Note:</strong> This article is still being written. Stay tuned for updates.</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="introduction">Introduction<a href="https://noteprotocol.org/blog/2024/08/21/note-protocol-path-to-vision-realization#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h2>
<p>Since the release of Bitcoin in 2008, it has revolutionized the financial world with its concept of a "peer-to-peer electronic cash system," as outlined in its whitepaper. Bitcoin's unshakable security and global consensus quickly made it a core asset in the cryptocurrency space. Thousands of miners secure the Bitcoin network through competitive mining, while Bitcoin itself has become a major asset on exchanges worldwide, attracting a significant user base. Bitcoin's global influence and solid consensus foundation have established it as a store of value, with the potential to become a global currency.</p>
<p>However, despite Bitcoin's strong technical and user foundations, it still has a long way to go to fully realize the vision outlined in its whitepaper. Against this backdrop, the NOTE Protocol emerged, aiming to leverage Bitcoin's strong consensus foundation to promote the global adoption of digital currencies, enabling more ordinary users to easily use Bitcoin and other digital currencies. To achieve this vision, NOTE Protocol confronts various challenges such as technical limitations, ecosystem competition, user demands, and price fluctuations, striving to promote global adoption while maintaining Bitcoin's stability and security.</p>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="challenges-and-development-prospects">Challenges and Development Prospects<a href="https://noteprotocol.org/blog/2024/08/21/note-protocol-path-to-vision-realization#challenges-and-development-prospects" class="hash-link" aria-label="Direct link to Challenges and Development Prospects" title="Direct link to Challenges and Development Prospects">​</a></h2>
<p>As we advance Bitcoin and NOTE Protocol's global vision, we must clearly recognize the technical foundations and real-world limitations. Bitcoin's success stems from adhering to conservative design principles. These principles ensure Bitcoin's security and stability. For instance, the UTXO model guarantees transparency and immutability of transactions, and the 10-minute block generation time, though limiting throughput, strengthens the system's resilience. This conservative design allows developers to innovate with confidence, without worrying about unpredictable node upgrades leading to large-scale restructuring. Additionally, while the Taproot upgrade improved Bitcoin's scripting capabilities, there remains room for optimization in on-chain scripting and block-packing TPS (transactions per second).</p>
<p>Bitcoin's network evolution is also influenced by a complex interplay between miners, users, and developers. Miners ensure network security through competitive mining, but their desire for higher transaction fees often conflicts with users' need for lower transaction costs. Developers must balance improving user experience and maintaining network security, adding further complexity to the ecosystem.</p>
<p>Moreover, economic factors are crucial. Bitcoin's price fluctuations directly affect network security and user adoption. As prices rise, more miners join the network, enhancing security; however, high prices may deter ordinary users due to increased costs, weakening Bitcoin's role as a daily payment tool. NOTE Protocol fully considers these economic factors in its design, aiming to lower transaction costs while enhancing network security to promote wider adoption.</p>
<p>In the face of these challenges, we must not only recognize Bitcoin's technical limitations but also find a balance between miners, users, and developers, while addressing complex economic trends to realize NOTE Protocol's global vision.</p>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="lessons-from-bitcoin-forks-and-sidechains">Lessons from Bitcoin Forks and Sidechains<a href="https://noteprotocol.org/blog/2024/08/21/note-protocol-path-to-vision-realization#lessons-from-bitcoin-forks-and-sidechains" class="hash-link" aria-label="Direct link to Lessons from Bitcoin Forks and Sidechains" title="Direct link to Lessons from Bitcoin Forks and Sidechains">​</a></h2>
<p>Bitcoin's evolution has seen multiple forks and explorations of different asset protocols, which have provided valuable lessons. Forks such as BCH (Bitcoin Cash) and BSV (Bitcoin Satoshi Vision) sought to increase TPS by expanding block capacity, yet despite technical progress, these forks failed to maintain Bitcoin's original consensus, leading to fragmented users and miners, and a significant decline in on-chain activity.</p>
<p>From these forks and sidechain experiences, we see that simply increasing TPS does not guarantee ecosystem prosperity, and losing consensus can lead to failure. The true challenge lies in enhancing transaction processing capacity and functionality while maintaining network security and stability. NOTE Protocol addresses this challenge by introducing more application scenarios on Bitcoin's Layer1, such as Token and NFT issuance and complex smart contract functionality, to promote global adoption.</p>
<p>These experiences demonstrate that advancing Bitcoin and its related protocols requires more than just technical improvements—it necessitates a holistic approach that considers consensus maintenance, user needs, and ecosystem coordination. This comprehensive perspective is the core principle NOTE Protocol adheres to in its design—building a flexible and efficient global protocol on Bitcoin's strong and stable Layer1 foundation.</p>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="untapped-potential-of-bitcoins-layer1">Untapped Potential of Bitcoin's Layer1<a href="https://noteprotocol.org/blog/2024/08/21/note-protocol-path-to-vision-realization#untapped-potential-of-bitcoins-layer1" class="hash-link" aria-label="Direct link to Untapped Potential of Bitcoin's Layer1" title="Direct link to Untapped Potential of Bitcoin's Layer1">​</a></h2>
<p>In reality, Bitcoin's Layer1 still has immense untapped potential. The UTXO model guarantees transaction transparency and immutability, while the 10-minute block generation time enhances network resilience. Although Bitcoin's TPS is often considered limited, this calculation method is misunderstood. TPS should be calculated from the moment a transaction is accepted by a node, rather than when it is included in a block. Instantaneous TPS depends on network conditions and server performance, currently reaching around 3,000 transactions. By upgrading blocks to 4MB, a single block can pack 6,000 to 7,000 transactions, with daily transaction volumes reaching 600,000 to 800,000 transactions. Despite this, Layer1's potential has yet to be fully realized, and further optimization of memory pool size and management could significantly improve network efficiency, potentially reaching a daily transaction volume of 1 million transactions.</p>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="expansion-of-programming-capabilities">Expansion of Programming Capabilities<a href="https://noteprotocol.org/blog/2024/08/21/note-protocol-path-to-vision-realization#expansion-of-programming-capabilities" class="hash-link" aria-label="Direct link to Expansion of Programming Capabilities" title="Direct link to Expansion of Programming Capabilities">​</a></h2>
<p>Bitcoin's scripting language, with its simplicity and predictability, is central to its security design, but it also limits its support for smart contracts and complex business logic. To address the limitations of Bitcoin's on-chain programming capabilities, NOTE Protocol introduces the concept of off-chain contracts. Off-chain contracts allow complex logic to be executed off-chain, with only the final state being stored and verified on-chain, fully leveraging Bitcoin's network security and stability.</p>
<p>Through off-chain contracts, NOTE Protocol can enable Token issuance, NFT creation, and complex smart contract rules—capabilities beyond the scope of Bitcoin's native scripting language. At the same time, off-chain contracts greatly improve efficiency, allowing NOTE Protocol to handle more complex business processes without compromising network security.</p>
<p>Off-chain contracts not only enhance Bitcoin's programming capabilities but also expand its application scenarios. For example, supply chain management, decentralized finance (DeFi), and cross-border payments can all be efficiently implemented within NOTE Protocol using off-chain contracts. Additionally, off-chain contracts reduce the burden on the main chain, improving overall system processing speed and efficiency.</p>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="consideration-of-economic-factors">Consideration of Economic Factors<a href="https://noteprotocol.org/blog/2024/08/21/note-protocol-path-to-vision-realization#consideration-of-economic-factors" class="hash-link" aria-label="Direct link to Consideration of Economic Factors" title="Direct link to Consideration of Economic Factors">​</a></h2>
<p>Bitcoin's continued price appreciation has strengthened network security and boosted miner enthusiasm. However, this has also led to high transaction costs, affecting its use as a daily payment tool. NOTE Protocol has designed a more reasonable economic model to balance user experience with system sustainability.</p>
<ul>
<li><strong>Low transaction fees</strong>: NOTE Protocol optimizes block space utilization, capping miner fees per transaction at $1 to $2, reducing the amount of information occupying space and lowering user cost.</li>
<li><strong>Native cross-chain support</strong>: NOTE Protocol supports asset transfers between UTXO chains, allowing assets to move across lower-cost chains and return to Bitcoin when needed, without relying on bridges, using Bitcoin's UTXO principles throughout.</li>
<li><strong>Reasonable economic design</strong>: By controlling transaction fees and optimizing protocol incentives, NOTE Protocol ensures network security and sustainability while maintaining low user entry barriers.</li>
</ul>
<p>NOTE Protocol's economic model mitigates the negative impacts of Bitcoin's high price, offering a more user-friendly experience and creating a sustainable ecosystem for miners and other participants.</p>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="path-to-vision-realization">Path to Vision Realization<a href="https://noteprotocol.org/blog/2024/08/21/note-protocol-path-to-vision-realization#path-to-vision-realization" class="hash-link" aria-label="Direct link to Path to Vision Realization" title="Direct link to Path to Vision Realization">​</a></h2>
<p>NOTE Protocol's vision is based on Bitcoin's strong consensus foundation, promoting global adoption of digital currencies. Achieving this vision requires not only technical breakthroughs but also reasonable economic design, expanded programming capabilities, and continuous adaptation to market changes.</p>
<ol>
<li>
<p><strong>Global promotion of Bitcoin and NOTE Protocol</strong>: Through technical optimization and economic design, NOTE Protocol promotes the global adoption of Bitcoin and itself. By optimizing memory pools, introducing off-chain contracts, and other innovations, NOTE Protocol expands Bitcoin's application scenarios, transforming it from a store of value into a platform supporting complex smart contracts and digital asset issuance.</p>
</li>
<li>
<p><strong>Continuous future improvements</strong>: As blockchain technology evolves, NOTE Protocol will continue to optimize to meet emerging market demands and technological challenges. Future improvements, such as more efficient transaction packing algorithms and node optimization, will further enhance Bitcoin's TPS and overall efficiency while maintaining decentralization and security.</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="conclusion">Conclusion<a href="https://noteprotocol.org/blog/2024/08/21/note-protocol-path-to-vision-realization#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>NOTE Protocol inherits the core strengths of the Bitcoin network while driving its global adoption through technical innovation and economic optimization. By leveraging off-chain contracts, low-cost transactions, and expanded programming capabilities, NOTE Protocol overcomes Bitcoin's inherent limitations, extending its application scenarios and ensuring security and stability in the process.</p>
<p>NOTE Protocol's vision is to promote the global adoption of digital currencies through technological iteration and global outreach, advancing a decentralized economic system. With Bitcoin's consensus foundation and NOTE Protocol's innovative power, the protocol is steadily progressing toward becoming a global standard for digital currencies.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Birth and Realization of Bitcoin Action]]></title>
        <id>https://noteprotocol.org/blog/2024/07/29/bitcoin-action</id>
        <link href="https://noteprotocol.org/blog/2024/07/29/bitcoin-action"/>
        <updated>2024-07-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[During EDCON 2024, the chief contributor to the NOTE protocol, Japan's blockchain technology company ChainBow, released a new interaction protocol between Bitcoin and dApps called Bitcoin Action, and demonstrated interactions between wallets and dApps.]]></summary>
        <content type="html"><![CDATA[<p>During EDCON 2024, the chief contributor to the NOTE protocol, Japan's blockchain technology company ChainBow, released a new interaction protocol between Bitcoin and dApps called Bitcoin Action, and demonstrated interactions between wallets and dApps.</p>
<p><img decoding="async" loading="lazy" alt="Image1" src="https://noteprotocol.org/assets/images/action-68a68dbca59feacb45f371d1bcc9b84d.png" width="1769" height="679" class="img_yq9M"></p>
<p>From the Bitcoin BIP21 protocol in 2011 to Ethereum's <a href="https://walletconnect.com/" target="_blank" rel="noopener noreferrer">Wallet Connect</a>, and then to the <a href="https://solana.com/solutions/actions" target="_blank" rel="noopener noreferrer">Solana Action</a> protocol, wallet and dApp interaction protocols have undergone multiple technological updates, continuously improving user experience.</p>
<p>The earliest <a href="https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki" target="_blank" rel="noopener noreferrer">BIP21</a> protocol provided a URI schema for payments, consisting of a receiving address and a transfer amount. Users made payments by scanning QR codes with their wallets, which was a one-way interaction process. Subsequently, updated versions such as <a href="https://bitcoinops.org/en/topics/bip70-payment-protocol/" target="_blank" rel="noopener noreferrer">BIP70</a>/71/72 emerged, focusing on secure interactions for merchants in Bitcoin payment scenarios.</p>
<p>Since 2017, the rise of dApp applications has extended wallet and dApp interactions beyond payment scenarios. Decentralized applications have become more powerful, involving interactions like smart contract calls, various signature scenarios, and the emergence of decentralized identities (DID), increasing the complexity and diversity of concepts, which has confused users. Currently, specific Web3 applications are still not widely adopted.</p>
<p>In June 2024, Solana released the new Action protocol, greatly simplifying the interaction process between wallets and dApps by removing the Connect Wallet step. It improved usability in scenarios such as payments, airdrop claims, Minting NFTs, obtaining Meme Coins, and interacting with DEXs.</p>
<p>Now, in July 2024, the Bitcoin Action protocol has officially arrived. This new protocol has made appropriate improvements based on the Solana Action process. Unlike Solana, Bitcoin uses the Partially Signed Bitcoin Transaction (PSBT) format and supports the excellent asset issuance NOTE protocol, bringing a convenient interaction experience to Bitcoin users. Receiving and sending BTC, NOTE Tokens, claiming airdrops of the NOTE protocol, Minting NFTs, and purchasing digital assets on the DEX <a href="https://utxo.exchange/" target="_blank" rel="noopener noreferrer">UtxoExchange</a> have become very simple. The new technology allows developers to create new products and applications on Bitcoin, bringing new wealth effects to users.</p>
<p>The complete protocol, <a href="https://chainbow.io/" target="_blank" rel="noopener noreferrer">Wallet</a>, and open-source sample code will be publicly available soon.</p>
<p><img decoding="async" loading="lazy" alt="Image2" src="https://noteprotocol.org/assets/images/action-sample-1eee194a85de3f89c6b8f65dce19ccf2.png" width="1058" height="693" class="img_yq9M"></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[NOTE Protocol: A New Milestone in Bitcoin Smart Contracts]]></title>
        <id>https://noteprotocol.org/blog/2024/07/9/note-protocol-bitcoin-smart-contracts</id>
        <link href="https://noteprotocol.org/blog/2024/07/9/note-protocol-bitcoin-smart-contracts"/>
        <updated>2024-07-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Since its inception, Bitcoin has undergone countless technological innovations. The emergence of the NOTE Protocol marks a significant milestone in Bitcoin's history. After six months of meticulous protocol and ecosystem development, the NOTE Protocol is now officially available to the global audience. Our vision aligns with Bitcoin's: to provide a peer-to-peer digital currency for 6 billion people worldwide.]]></summary>
        <content type="html"><![CDATA[<p>Since its inception, Bitcoin has undergone countless technological innovations. The emergence of the NOTE Protocol marks a significant milestone in Bitcoin's history. After six months of meticulous protocol and ecosystem development, the NOTE Protocol is now officially available to the global audience. Our vision aligns with Bitcoin's: to provide a peer-to-peer digital currency for 6 billion people worldwide.</p>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="1-introduction-to-the-note-protocol">1. Introduction to the NOTE Protocol<a href="https://noteprotocol.org/blog/2024/07/9/note-protocol-bitcoin-smart-contracts#1-introduction-to-the-note-protocol" class="hash-link" aria-label="Direct link to 1. Introduction to the NOTE Protocol" title="Direct link to 1. Introduction to the NOTE Protocol">​</a></h2>
<p>The NOTE Protocol is a digital asset issuance protocol based on the Bitcoin UTXO model, designed to develop blockchain products that can impact over 6 billion people worldwide. Unlike other protocols, the NOTE Protocol is genuinely built on Bitcoin's UTXO model. It uses the sCrypt smart contract language, compatible with TypeScript, and compiles to native Bitcoin opcodes. The protocol is Turing complete and supports powerful features such as Oracle integration. The NOTE Protocol also supports on-chain multi-signature, MAST, and the Lightning Network while providing an off-chain environment with state inheritance functionality.</p>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="2-unique-advantages-of-the-note-protocol">2. Unique Advantages of the NOTE Protocol<a href="https://noteprotocol.org/blog/2024/07/9/note-protocol-bitcoin-smart-contracts#2-unique-advantages-of-the-note-protocol" class="hash-link" aria-label="Direct link to 2. Unique Advantages of the NOTE Protocol" title="Direct link to 2. Unique Advantages of the NOTE Protocol">​</a></h2>
<p>Unlike protocols such as Ordinals and Atomicals, all operations in the NOTE Protocol are cryptographically based, with Bitcoin miners ensuring asset ownership. The transaction costs are incredibly low, eliminating the need for dual transactions like other protocols. More importantly, the NOTE Protocol supports smart contracts, with its first example contract implementing functionalities such as Bitwork mining and time-decaying mining rewards. This opens up new possibilities beyond Ethereum's EVM smart contracts, leveraging Bitcoin's UTXO model for efficient concurrency and maximum consensus, offering new choices for all blockchain developers. The sCrypt team provides a comprehensive development, compilation, and testing environment, making the development process revolutionary in terms of learning curve, environment setup, fair launch, and complex functionality implementation.</p>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="3-contributing-teams">3. Contributing Teams<a href="https://noteprotocol.org/blog/2024/07/9/note-protocol-bitcoin-smart-contracts#3-contributing-teams" class="hash-link" aria-label="Direct link to 3. Contributing Teams" title="Direct link to 3. Contributing Teams">​</a></h2>
<p>The NOTE Protocol is an open-source, VC-free geek protocol, licensed under MIT, with community contributions. The initial core contributing team hails from Tokyo, Japan, with extensive experience in blockchain technology. They have developed products like the multi-chain Ethereum EVM wallet Wallet3.io, the Bitcoin UTXO wallet ChainBow.io, a licensed Japanese Bitcoin exchange, an award-winning Web3 project by Japan's Digital Minister, an early DeFi prototype from 2018, blockchain data services, and blockchain explorers. Additionally, numerous experts have contributed Python and Go versions of open-source wallets, along with browser plugin wallets and a trading marketplace from the NoteMarket team.</p>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="4-technical-details">4. Technical Details<a href="https://noteprotocol.org/blog/2024/07/9/note-protocol-bitcoin-smart-contracts#4-technical-details" class="hash-link" aria-label="Direct link to 4. Technical Details" title="Direct link to 4. Technical Details">​</a></h2>
<p>The NOTE Protocol employs an innovative approach to manage Bitcoin transactions and assets. In traditional Bitcoin transactions, the input unlocks old UTXOs and generates new UTXOs. In the NOTE Protocol, the transaction output is viewed as a user account, represented by the transaction output script hash, offering strong privacy. Asset types and amounts derive from transaction inputs, simplifying asset tracking and enhancing privacy.</p>
<p>Unlike Ordinals and Atomicals, which use P2TR (Taproot) to add inaccessible script areas, the NOTE Protocol allows direct operation on unlock data via opcodes, increasing data usability. Additionally, the NOTE Protocol can be implemented via P2SH, P2WSH, and other methods, enhancing flexibility and cross-chain capability.</p>
<p>The off-chain smart contract environment is based on the unaltered first version of BVM from Satoshi Nakamoto, sourced from the Bitcore core codebase, and has been running stably for over a decade. The NOTE Protocol provides multiple runtime variables, including asset issuance quantities, current block height, block time, transaction inputs and outputs, and transaction initiator accounts. Previous transaction variables can be inherited and accessed by subsequent transactions, facilitating state transfer and validation, laying the technical foundation for new DeFi models based on the UTXO model.</p>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="5-smart-contracts-and-future-prospects">5. Smart Contracts and Future Prospects<a href="https://noteprotocol.org/blog/2024/07/9/note-protocol-bitcoin-smart-contracts#5-smart-contracts-and-future-prospects" class="hash-link" aria-label="Direct link to 5. Smart Contracts and Future Prospects" title="Direct link to 5. Smart Contracts and Future Prospects">​</a></h2>
<p>The NOTE Protocol has released multiple N20 asset issuance smart contracts on GitHub, showcasing its capability to execute complex logic on the Bitcoin network. Developers can create smart contracts for real-world applications like AI problem-solving bounties, leveraging Bitcoin's vast user base and strong consensus to demonstrate the practicality and innovation of their products. The first password management and encrypted note management software based on the NOTE Protocol has already been launched <a href="https://note.sv/" target="_blank" rel="noopener noreferrer">https://note.sv</a>. It is a real blockchain application developed entirely for ordinary users. We believe that with the influx of many developers, more ecosystem applications will emerge. The NOTE Protocol is also developing and refining N721 NFT asset issuance and Alias DID protocols.</p>
<p>Designed with foresight for high-performance blockchain products, the NOTE Protocol enables asset transfer across chains without bridges, greatly expanding future possibilities.</p>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="6-conclusion">6. Conclusion<a href="https://noteprotocol.org/blog/2024/07/9/note-protocol-bitcoin-smart-contracts#6-conclusion" class="hash-link" aria-label="Direct link to 6. Conclusion" title="Direct link to 6. Conclusion">​</a></h2>
<p>The NOTE Protocol represents a crucial advancement in extending Bitcoin's functionality to include smart contracts. Its key features include:</p>
<ul>
<li><strong>Smart Contract Support</strong>: Expands Bitcoin's application range, supporting complex logic and transaction types.</li>
<li><strong>UTXO Model</strong>: Leverages Bitcoin's security and efficiency.</li>
<li><strong>Cross-Chain Capability</strong>: Supports asset transfers between different UTXO chains.</li>
<li><strong>Real-World Applications</strong>: Employs advanced cryptographic techniques to support complex scenarios.</li>
<li><strong>Low Cost and High Efficiency</strong>: Optimizes data storage to reduce transaction costs.</li>
<li><strong>Open Source and Community-Driven</strong>: Emphasizes open-source principles, promoting transparency and trustworthiness.</li>
</ul>
<p>As the NOTE Protocol evolves, we can anticipate more innovative applications, enhancing user experiences while adhering to Bitcoin's core values.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="note-protocol">NOTE Protocol<a href="https://noteprotocol.org/blog/2024/07/9/note-protocol-bitcoin-smart-contracts#note-protocol" class="hash-link" aria-label="Direct link to NOTE Protocol" title="Direct link to NOTE Protocol">​</a></h2>
<ul>
<li>Website: <a href="https://noteprotocol.org/" target="_blank" rel="noopener noreferrer">https://noteprotocol.org</a></li>
<li>X: <a href="https://twitter.com/NoteProtocol" target="_blank" rel="noopener noreferrer">https://twitter.com/NoteProtocol</a></li>
<li>GitHub: <a href="https://github.com/NoteProtocol" target="_blank" rel="noopener noreferrer">https://github.com/NoteProtocol</a></li>
</ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Turing completeness & Halting Problem]]></title>
        <id>https://noteprotocol.org/blog/turing-complete-halting-problem</id>
        <link href="https://noteprotocol.org/blog/turing-complete-halting-problem"/>
        <updated>2024-06-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[If we say the native Bitcoin scripting language is Turing complete, many people will criticize us.]]></summary>
        <content type="html"><![CDATA[<p>If we say the native Bitcoin scripting language is Turing complete, many people will criticize us.</p>
<p>Turing Completeness refers to a programming language that can implement any computation a Turing machine is capable of. This concept comes from Alan Turing, who proposed the Turing Machine model. It’s an abstract machine that performs calculations by reading and writing symbols on an infinitely long tape.</p>
<p>If a programming language is Turing complete, it means it can simulate all computational functions of a Turing machine. Typically, this requires the language to support conditional branching (like if/else statements) and loops (or recursion) to make decisions based on data and repeatedly perform certain actions until a specific condition is met.</p>
<p>Is it reasonable that a program in an infinite loop could run indefinitely on an infinitely long tape? Is it reasonable to say that a program that can implement an infinite loop is Turing complete?</p>
<p>In fact, simple infinite loops can be implemented with a very basic set of instructions, but if there's insufficient control structure (like conditional branches) and data handling capabilities, such systems cannot be considered Turing complete. Turing completeness requires the ability to express any complex algorithmic logic, including but not limited to loop structures. Furthermore, infinite loops introduce another issue: the Halting Problem.</p>
<p>The Halting Problem, proposed by Alan Turing in the 1930s, is a well-known problem in computation theory. It explores whether there exists an algorithm that can determine whether any given program and its input will eventually stop executing.</p>
<p>Turing proved the Halting Problem is unsolvable. Turing-complete systems can express and execute all possible programs, including those that never halt. The unsolvability of the Halting Problem arises directly from the capabilities of these systems. In short, the robust computational power of Turing-complete systems introduces uncertainty because we cannot predict in advance whether a program will stop in all cases.</p>
<p>Now let’s see why some claim Bitcoin's script is not Turing complete. Because it lacks loop commands in its opcode, some argue it's not Turing complete. However, assembly language also lacks loop commands, yet no one disputes its Turing completeness. Assembly language provides the necessary tools to implement loops primarily through conditional jump instructions. Bitcoin script is similar to assembly in that loops can be unrolled. For example, to sum from 1 to 100, you could keep adding: 1+2=3, 3+3=6, 6+4=10, and so on until 100. This approach has a benefit—it addresses the Halting Problem. We know that Bitcoin transactions and blocks are limited in size, from 1MB to 4MB, potentially larger. Therefore, an unrolled script will eventually hit this size limit and force the program to stop.</p>
<p><img decoding="async" loading="lazy" alt="Image1" src="https://noteprotocol.org/assets/images/scrypt-loop-e351b2a32aad4299ca293566d86b3e73.png" width="628" height="328" class="img_yq9M"></p>
<p>One might say: Bitcoin script language is Turing complete and also solves the Halting Problem.</p>
<p>In Ethereum, the Halting Problem is addressed by charging a fee (gas) for each operation. Theoretically, a wealthy Ethereum user could pay to run a program for a year, potentially clogging the EVM.</p>
<p>However, on Bitcoin , no amount of money can infinitely increase block size, ensuring programs must stop. This is part of the consensus.</p>
<p>In the computing field, there’s an important principle: the KISS principle (Keep It Simple, Stupid). Satoshi Nakamoto adhered to this principle.</p>
<p>Maintaining simplicity in a system is a crucial consideration for designers. In environments like Note Protocol, script size is still controlled, currently providing about 2.5K of script JSON storage space. In the future, it could expand to between 1MB and 4MB.</p>]]></content>
        <category label="NoteProtocol" term="NoteProtocol"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Continuous Upgrades to the NOTE Protocol]]></title>
        <id>https://noteprotocol.org/blog/n20-upgrade</id>
        <link href="https://noteprotocol.org/blog/n20-upgrade"/>
        <updated>2024-04-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Since the public release of its Proof of Concept indexer in February 2024, the NOTE protocol has garnered widespread attention. Following feedback and demands from users, the protocol has been continuously upgraded.]]></summary>
        <content type="html"><![CDATA[<p>Since the public release of its Proof of Concept indexer in February 2024, the NOTE protocol has garnered widespread attention. Following feedback and demands from users, the protocol has been continuously upgraded.</p>
<p>As of April 4th, the following upgrades have been implemented:</p>
<ul>
<li>The Payload data area has been fully expanded, meaning that Payload data can now be stored either in the unlocking script or in the redemption script.</li>
<li>Added a Burn method to N20. Tokens can now be burned.</li>
<li>The off-chain contract execution environment has been enriched with a plethora of environmental variables, including block information such as block time, block hash, block height, as well as transaction information like transaction hash, all inputs and outputs. Ticker information, such as the total mint amount, etc., has also been included.</li>
</ul>
<p>The indexer code has undergone extensive refactoring.</p>
<p>One of the goals of this upgrade is to enable anyone to participate in the development of NOTE smart contracts. This allows for the creation of unique smart contracts that can be published to the NOTE indexer, facilitating the issuance of digital assets. A comprehensive tutorial on contract creation is currently being developed.</p>
<p>The capabilities of the NOTE protocol can be seen in the <a href="https://github.com/NoteProtocol/scryptdemo/blob/main/src/contracts/n20-pow.ts" target="_blank" rel="noopener noreferrer">POW mining contract</a> released in February.</p>
<p>We've added some comments to help everyone understand:</p>
<div class="language-typescript codeBlockContainer_t_ki theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_ELIs"><pre tabindex="0" class="prism-code language-typescript codeBlock_f7Gv thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_Nyao"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Each contract is a subclass of SmartContract, and its member variables are read-only and need to be decorated with @prop().</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">N20_Pow</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">SmartContract</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">prop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">readonly</span><span class="token plain"> tick</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> ByteString</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">prop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">readonly</span><span class="token plain"> max</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">prop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">readonly</span><span class="token plain"> lim</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">prop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">readonly</span><span class="token plain"> dec</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">prop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">readonly</span><span class="token plain"> bitwork</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> ByteString</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">prop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">readonly</span><span class="token plain"> start</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// If the contract includes member variables, they need to be initialized using a constructor.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tick</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> ByteString</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> max</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lim</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dec</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bitwork</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> ByteString</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> start</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">...</span><span class="token plain">arguments</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// The identifier of the digital asset, its name.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tick </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tick</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// The maximum issuance of the digital asset, if there is no limit, it can be specified as 0.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">max </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> max</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// The mining limit per transaction, it cannot exceed the maximum value.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">lim </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lim</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// The decimal unit of the digital asset, for example, if dec=8, then 1 token should be followed by 8 zeros, all quantity values amt, including max and lim, are affected by this. 100000000 represents 1.00000000.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dec </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Mining difficulty, the required leading characters of each transaction's hash256.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">bitwork </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> bitwork </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// The starting height of the mining contract, used to prevent pre-mining.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// The block limit algorithm for mining, needs to be decorated with @method().</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">method</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">getBlockLimit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">assert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Block height is too low'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Halving occurs every 1000 blocks, the number of halvings is determined by the block height minus the starting height.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> halvings </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000n</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// A maximum of 7 halvings.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        halvings </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> halvings </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7n</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7n</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> halvings</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// The mining quantity limit is halved with each halving. Here, the binary rshift operator is used to perform the division by 2 operation.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> subsidy </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rshift</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">lim</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> halvings</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> subsidy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// The quantity limit algorithm for mining, needs to be decorated with @method().</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">method</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">getAmountLimit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentMined</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// The quantity limit starts from how much of the total amount has already been mined.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> miningAmount </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">lim</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> threshold </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">max </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2n</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Loop 7 times, each loop, if the current mined amount reaches the threshold, then the mining amount is halved, and the threshold is updated.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> halving </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0n</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> halving </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7n</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> halving</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentMined </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> threshold</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                miningAmount </span><span class="token operator" style="color:#393A34">/=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2n</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Halve the mining amount</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                threshold </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rshift</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">max</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> halving </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2n</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Update the next threshold</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> miningAmount</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">method</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">mint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tick</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> ByteString</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> amt</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> total</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> height</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tx</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> ByteString</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Check if the transaction's hash256 leading characters match the mining contract's difficulty requirement.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> txid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hash256</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">assert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">slice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">txid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0n</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">bitwork</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">bitwork</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'not match target'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Check if the total mining amount exceeds the maximum issuance.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">assert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">max </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0n</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> total </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">max</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Over max'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">assert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tick </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tick</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Tick does not match'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Check if the mining amount exceeds the block limit and the total halving limit.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> limit1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getBlockLimit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> limit2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getAmountLimit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">total</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> limit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> limit1 </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> limit2 </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> limit2 </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> limit1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">assert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">amt </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> limit </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> amt </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">max </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> total</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Amount check failed'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// The method for transferring Tokens, needs to be decorated with @method().</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">method</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">transfer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tick</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> ByteString</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">assert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tick </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tick</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Tick does not match'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup_OyQ3"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_sP5o" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon__Uec"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_qrud"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>there is a bug in the above code about max=0. if you want to use it in your assets, please DONT set max=0.</p>
</blockquote>
<p>This upgrade added the Burn method, allowing for the burning of Tokens. <a href="https://github.com/NoteProtocol/scryptdemo/blob/main/src/contracts/n20-joss.ts" target="_blank" rel="noopener noreferrer">A new example</a> is as follows.</p>
<div class="language-typescript codeBlockContainer_t_ki theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_ELIs"><pre tabindex="0" class="prism-code language-typescript codeBlock_f7Gv thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_Nyao"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// This example does not use a constructor but instead uses a static setting of parameters, because the values are entirely within the contract and cannot be reused for other digital assets.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">N20_Joss</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">SmartContract</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Joss paper: A type of paper made to resemble money and burned in front of deities.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">prop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> tick</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> ByteString </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toByteString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'JOSS'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// No issuance limit.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">prop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> max</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0n</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Can issue 10,000 at a time.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">prop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> lim</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000n</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// No decimal places.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">prop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> dec</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0n</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">method</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">mint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tick</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> ByteString</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> amt</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> bigint</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">assert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tick </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> N20_Joss</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tick</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Tick does not match'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// The issuance amount cannot exceed the limit of 10,000.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">assert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">amt </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> N20_Joss</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">lim</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Limit does not match'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">method</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">transfer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Cannot transfer.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">assert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">method</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">burn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tick</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> ByteString</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Can be burned.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">assert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tick </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> N20_Joss</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tick</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Tick does not match'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup_OyQ3"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_sP5o" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon__Uec"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_qrud"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The N20_Joss contract was released at
<a href="https://mempool.space/tx/c2cda4c9da3a91bd245d9f6250b5ca8f2ec81d50c14821e87a033fde1f3b5561" target="_blank" rel="noopener noreferrer">https://mempool.space/tx/c2cda4c9da3a91bd245d9f6250b5ca8f2ec81d50c14821e87a033fde1f3b5561</a></p>
<p>Support for smart contracts is the biggest difference between the NOTE protocol and other protocols. The NOTE wallet and indexer create an execution environment for smart contracts, allowing users to write their own smart contracts. For basic knowledge about smart contracts, you can refer to:</p>
<ul>
<li><a href="https://scrypt.io/" target="_blank" rel="noopener noreferrer">sCrypt</a></li>
<li><a href="https://xiaohuiliu.medium.com/" target="_blank" rel="noopener noreferrer">sCrypt Medium</a></li>
</ul>
<p>Why Bitcoin smart contracts are Turing complete:</p>
<ul>
<li><a href="https://medium.com/coinmonks/turing-machine-on-bitcoin-7f0ebe0d52b1" target="_blank" rel="noopener noreferrer">Turing Machines on Bitcoin</a></li>
</ul>
<p>A tutorial on smart contract development for the NOTE protocol is being created, so stay tuned.</p>]]></content>
        <category label="NoteProtocol" term="NoteProtocol"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[N20 Token protocol draft is out]]></title>
        <id>https://noteprotocol.org/blog/n20-draft</id>
        <link href="https://noteprotocol.org/blog/n20-draft"/>
        <updated>2024-02-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[NOTE: The Bitcoin Protocol with Smart Contract Capabilities]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_obL5" id="note-the-bitcoin-protocol-with-smart-contract-capabilities">NOTE: The Bitcoin Protocol with Smart Contract Capabilities<a href="https://noteprotocol.org/blog/n20-draft#note-the-bitcoin-protocol-with-smart-contract-capabilities" class="hash-link" aria-label="Direct link to NOTE: The Bitcoin Protocol with Smart Contract Capabilities" title="Direct link to NOTE: The Bitcoin Protocol with Smart Contract Capabilities">​</a></h2>
<p><strong>The NOTE protocol marks a significant advancement in the history of Bitcoin.</strong></p>
<p>The NOTE protocol is a digital asset issuance protocol based on Bitcoin's UTXO model, distinct from many recently emerged protocols, as NOTE is genuinely rooted in Bitcoin's UTXO model. It utilizes a smart contract language compatible with Typescript, whose compilation results in Bitcoin native opcodes, enabling a powerful feature set that includes Oracles and zero-knowledge proofs.</p>
<p>Unlike protocols such as Ordinals and Atomicals, NOTE also uses an indexer to tally user assets, but it is entirely based on cryptography, secured by Bitcoin miners to ensure asset ownership, thus avoiding misoperations due to indexer tagging. Moreover, NOTE's transaction costs are extremely low, eliminating the need to send two transactions as with Ordinals and Atomicals. More importantly, the NOTE protocol supports smart contracts, for instance, enabling Bitwork mining and a diminishing mining quantity over time. It employs actual Token values, not based on prime protocols numbered by Satoshi nor dependent on UTXO balance coloring schemes.</p>
<p>Compared to many "inter-chain bridging protocols," NOTE issues native Bitcoin assets, avoiding operations that involve using BTC as collateral to issue and trade assets on other chains.</p>
<table><thead><tr><th>Protocol</th><th>Ordinals/BRC20</th><th>Atomicals/ARC20</th><th>EVM/Zk Layer2</th><th>NOTE/N20</th></tr></thead><tbody><tr><td>UTXO</td><td>YES</td><td>YES</td><td>NO</td><td>YES</td></tr><tr><td>Bitcoin Assets</td><td>YES</td><td>YES</td><td>NO</td><td>YES</td></tr><tr><td>Smart Contract</td><td>NO</td><td>NO</td><td>YES(EVM)</td><td>YES(Bitcoin OP Codes)</td></tr><tr><td>Indexer</td><td>YES</td><td>YES</td><td>NO</td><td>YES</td></tr><tr><td>Index Logic</td><td>Satoshi Ordinals</td><td>Colored Satoshi</td><td>-</td><td>Cryptography</td></tr><tr><td>Cross Chain Transfer</td><td>NO</td><td>NO</td><td>YES with bridge</td><td>YES</td></tr><tr><td>Fee(Gas)</td><td>High</td><td>High</td><td>Medium-Low</td><td>Low</td></tr><tr><td>Fund</td><td>NO</td><td>unknown</td><td>YES or unknown</td><td>NO</td></tr></tbody></table>
<p>The NOTE protocol supports cross-chain functionality, allowing native assets on Bitcoin to be sent to other UTXO chains, as well as receiving assets from these chains. All of this is based on cryptography and the consensus of the Bitcoin blockchain.</p>
<p>This protocol is entirely the result of open-source contributions from Bitcoin development luminaries, with no institutional investment involved.</p>
<p>Now, let's delve into a detailed <strong>technical interpretation</strong>:</p>
<p>The last bull market was ignited by a large number of institutional investment projects and ultimately collapsed with the downfall of institutions like FTX. Starting from the bear market bottom in 2023, the market has returned to the grassroots and developer enthusiasts' home ground. Inscriptions led the market trend without any investment, bringing the advantages of the UTXO model back into the public eye. As the anchor of digital currency, Bitcoin needs usable and practical technological solutions to achieve asset appreciation and practical applications.</p>
<p>Compared to the EVM, Bitcoin's UTXO model has significant efficiency and concurrency advantages. However, issuing native assets on Bitcoin's UTXO model involves several challenging issues, mainly how assets are identified. Another issue is how assets are preserved in closely linked transactions.</p>
<p>A UTXO-style transaction is illustrated as follows:</p>
<p><img decoding="async" loading="lazy" alt="Image1" src="https://noteprotocol.org/assets/images/n20-1-cde9054912c3c65fdf5c79ee220b87ad.png" width="1050" height="1278" class="img_yq9M"></p>
<p>The NOTE protocol adopts an innovative approach to managing Bitcoin transactions and assets, significantly different from other protocol solutions. In traditional Bitcoin transactions, the input part of a transaction unlocks a previous transaction's output (i.e., the old UTXO) and generates new transaction outputs (i.e., new UTXOs). In other protocol solutions, assets are tied to newly generated UTXOs, causing users' assets to be scattered across different UTXOs. This method requires indexers and wallets to maintain a comprehensive list of UTXOs to ensure the accuracy of asset binding relationships. It also necessitates careful management of UTXOs with asset tags to avoid spending mistakes, and the entire UTXO must be spent at once.</p>
<p>In contrast, the NOTE protocol employs a method that treats transaction outputs as user accounts, where a user's account is represented by the transaction output script hash, as illustrated by the TX1 transaction output in the example. This account is entirely private, and the types and quantities of assets tied to it are derived from the unlocking inputs of TX1. When these assets are spent in TX2, after being unlocked and confirmed by Bitcoin miners, new transaction outputs are generated. During this process, the indexer of the NOTE protocol only needs to record the transaction details disclosed at the time of unlocking and can provide a Merkle proof after block confirmation to verify the transaction's validity.</p>
<p>This design not only simplifies asset tracking and management, reducing the issue of asset fragmentation, but also enhances transaction privacy. By using transaction outputs as accounts and relying on the verification by Bitcoin network miners and the blockchain consensus mechanism, the NOTE protocol offers a more secure, efficient, and privacy-preserving method for managing digital assets.</p>
<p>A typical Taproot P2TR format transaction is illustrated as follows:</p>
<p><img decoding="async" loading="lazy" alt="Image2" src="https://noteprotocol.org/assets/images/n20-2-1af9d959293b44e237e1417fd33f3b81.png" width="2220" height="746" class="img_yq9M"></p>
<p>The technical strategy adopted by the NOTE protocol significantly differs from the Ordinals and Atomicals protocols. Ordinals and Atomicals utilize the redemption script of P2TR (Taproot) to create an inaccessible data area by adding OP_FALSE OP_IF opcodes, embedding additional data. In contrast, the NOTE protocol allows direct manipulation of unlocking data through opcodes, enhancing data usability. In the NOTE protocol, example scripts can directly pop data from the stack, while more complex scripts can perform on-chain checks such as hashlock.</p>
<p>Moreover, the NOTE protocol is not limited to using P2TR; it can also be implemented through P2SH (Pay to Script Hash), P2WSH (Pay to Witness Script Hash), and non-standard scripts, increasing the protocol's flexibility and the capability for cross-chain asset transactions. A key innovation of the NOTE protocol is its use of msgpack encoding instead of json encoding for data, which is more compact and helps reduce the data volume per transaction, thereby lowering transaction costs for users.</p>
<p>In the NOTE protocol, addresses constructed by specific redemption scripts act as user accounts. These account addresses can only be confirmed by miners when correctly unlocked. The asset transaction data contained in the unlocking script is recognized by the indexer upon unlocking and processed by off-chain smart contracts. Only asset transactions verified by off-chain contracts are recorded by the indexer, effectively preventing Bitcoin wallets from mistakenly spending NOTE's UTXO and allowing the recovery of small amounts of Bitcoin (e.g., 546 Satoshi) in UTXOs.</p>
<p>The design of the NOTE protocol considers multiple upgrades to privacy and transaction space optimization in the Bitcoin network since 2017. At the same time, it draws on the large block strategy represented by BSV (Bitcoin SV), delving into the potential of Bitcoin scripting. The smart contract solution of the NOTE protocol is based on the Bitcoin smart contract language developed by the <a href="https://scrypt.io/" target="_blank" rel="noopener noreferrer">sCrypt</a> team, which supports off-chain contract verification. Since the Bitcoin script language is Turing complete and ensures execution within a given script length, indexers are not trapped in infinite loops due to poorly designed smart contracts, ensuring system stability and efficiency.</p>
<p>A demo smart contract project has been released on GitHub.</p>
<p><a href="https://github.com/NoteProtocol/scryptdemo" target="_blank" rel="noopener noreferrer">https://github.com/NoteProtocol/scryptdemo</a></p>
<p><img decoding="async" loading="lazy" alt="Image3" src="https://noteprotocol.org/assets/images/n20-3-f5e48b9da809ebcf49af3a978d9b7b58.png" width="1106" height="299" class="img_yq9M"></p>
<p>It demonstrates the capability of the NOTE protocol to implement complex logic on the Bitcoin network through simulating Bitcoin mining's halving mechanism and Atomicals' Bitwork difficulty mining with a PoW contract. By generating a 1KB Bitcoin script, the contract allows indexers to call and verify whether transactions comply with the protocol, showcasing the feasibility and flexibility of smart contracts on the Bitcoin network.</p>
<p>The use of Rabin signature algorithm Oracles and complex contracts based on zero-knowledge proofs provides a higher level of security and privacy protection. These technologies play a crucial role in the implementation of smart contracts, especially when verifying specific conditions or executing particular logic.</p>
<p>Leveraging these smart contracts, asset issuance on Bitcoin can be used to realize real-world application scenarios, such as bounty scenarios for solving problems with AI. In such scenarios, anyone who can submit a verifiable computational result can receive a reward. This not only demonstrates the practicality of Bitcoin smart contracts but also shows how they can facilitate the realization of complex applications beyond traditional financial transactions and asset management.</p>
<p>The application prospects and implementation mechanisms of smart contracts on the Bitcoin network reflect an important direction in the development of cryptocurrency technology: combining blockchain's decentralization and immutability with complex business logic and application scenarios to explore new possibilities. For those interested in delving deeper or participating in development, following and learning from these smart contract projects and their implementations on GitHub is undoubtedly a valuable resource.</p>
<p>The latest developments and announcements of the NOTE protocol showcase its depth and breadth in the blockchain technology field. The issuance of N20 Token assets is just one of the many functions of the NOTE protocol. It also includes DID (Decentralized Identity), encrypted data, and ownership identification, and with the formulation and verification process of N721 NFTs and Alias (Bitcoin alias system), the capabilities and application scope of the NOTE protocol are expected to expand further.</p>
<p>Currently, to allow users to experience the minting and transferring of N20 Tokens, a command-line wallet has been released on GitHub, and an open-source indexer is also planned to be released. The openness of these tools and resources aims to encourage community member participation and practical experience with the NOTE protocol's functions, thereby accelerating the protocol's testing, improvement, and application development.</p>
<p>The open-source contributors behind the NOTE protocol emphasize that all content is for technical discussion only, and any asset issuance and speculation are unrelated to the contributors. This stance encourages a community environment centered on technology and innovation, rather than speculation and investment.</p>
<p>As the NOTE protocol continues to be developed and refined, it is foreseeable that more real applications based on this protocol will emerge. These applications will leverage the unique functions and advantages of the NOTE protocol to create new value and possibilities in Bitcoin and broader blockchain fields. The ongoing contributions and collaborative spirit of the open-source community are indispensable forces driving this process.</p>
<h2 class="anchor anchorWithStickyNavbar_obL5" id="summary">Summary<a href="https://noteprotocol.org/blog/n20-draft#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>The NOTE protocol represents a significant advancement in the expansion of the Bitcoin network towards smart contract functionality. By introducing smart contracts to Bitcoin, the most original and widely used cryptocurrency platform, the NOTE protocol not only enhances Bitcoin's functionality but also offers unprecedented possibilities for innovation to developers and users. Here are several key features of the NOTE protocol:</p>
<p>Smart Contract Support: The NOTE protocol extends the application range of Bitcoin through smart contracts, allowing for the creation and execution of more complex logic and transaction types on the Bitcoin network. This includes, but is not limited to, asset issuance, decentralized finance (DeFi) applications, and other scenarios requiring conditional execution.</p>
<p>UTXO-based Model: Unlike account-based smart contract platforms, the NOTE protocol is built on Bitcoin's UTXO model, leveraging Bitcoin's security and efficiency.</p>
<p>Cross-chain Functionality: The NOTE protocol supports cross-chain transactions, enabling digital assets to move between different UTXO chains, further enhancing its flexibility and application scope.</p>
<p>Real-world Applications: The NOTE protocol supports advanced cryptographic technologies, such as zero-knowledge proofs and Rabin signature algorithms, which can be applied in more complex real-world application scenarios.</p>
<p>Low Cost and High Efficiency: By optimizing data storage and using msgpack encoding, the NOTE protocol aims to reduce transaction costs and improve network efficiency.</p>
<p>Open Source and Community-driven: The NOTE protocol emphasizes the spirit of open source and community contribution, promoting the transparency and trustworthiness of the technology while also encouraging broader development and application innovation.</p>
<p>As the NOTE protocol continues to develop and its applications deepen, we can expect to see more innovative applications and services emerging in the Bitcoin ecosystem, all of which will provide users with richer functionality and a better experience while maintaining Bitcoin's core values.</p>
<p>Website: <a href="https://noteprotocol.org/" target="_blank" rel="noopener noreferrer">https://noteprotocol.org</a></p>
<p>X: <a href="https://twitter.com/NoteProtocol" target="_blank" rel="noopener noreferrer">https://twitter.com/NoteProtocol</a></p>
<p>GitHub: <a href="https://github.com/NoteProtocol" target="_blank" rel="noopener noreferrer">https://github.com/NoteProtocol</a></p>
<p>Smart Contract Language: <a href="https://docs.scrypt.io/" target="_blank" rel="noopener noreferrer">https://docs.scrypt.io/</a></p>]]></content>
        <category label="N20" term="N20"/>
        <category label="Draft" term="Draft"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[NoteProtocol v2.0 Draft is out]]></title>
        <id>https://noteprotocol.org/blog/release-2.0-draft</id>
        <link href="https://noteprotocol.org/blog/release-2.0-draft"/>
        <updated>2024-01-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[🚀 Exciting update from our team: We’ve crafted a #Bitcoin protocol, tailored for #UTXO-based blockchains. This protocol not only allows for the creation of tokens and NFTs but also integrates optional data #encryption, #SmartContracts, and #DID definitions, all under the MIT License.]]></summary>
        <content type="html"><![CDATA[<p>🚀 Exciting update from our team: We’ve crafted a #Bitcoin protocol, tailored for #UTXO-based blockchains. This protocol not only allows for the creation of tokens and NFTs but also integrates optional data #encryption, #SmartContracts, and #DID definitions, all under the MIT License.</p>
<p>🔬 The first segment has been successfully tested on #BTC, #RXD, and #BSV networks. The #NFT/#Token/Indexer features are nearing completion, with a January release following thorough validation to ensure a high-security standard.</p>
<p>🌍 As we move forward, we’re inviting the community to contribute to this evolving project. Our goal is to establish a protocol committee of contributors, dedicated to promoting and enhancing the protocol, ensuring it serves the global Bitcoin community effectively.</p>
<p>🔧 Your input is vital in this journey of innovation and collaboration. We’re here to support projects leveraging this protocol, fostering a secure and dynamic blockchain ecosystem.</p>
<p>🔔 Stay connected for detailed updates and be part of shaping the future of blockchain technology. #BlockchainEngineering #BitcoinProtocol #DecentralizedInnovation #OpenSourceFuture</p>
<p>Happy New Year everyone!</p>]]></content>
        <category label="NoteProtocol" term="NoteProtocol"/>
    </entry>
</feed>